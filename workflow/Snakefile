# Look for SRR .txt in directory
import glob
import pandas as pd
import numpy as np
from pathlib import Path

configfile: "../config/config.yaml"

# FUNCTIONS
def get_table(SRA_run_info: Path) -> pd.DataFrame:
    """
    read SraRunInfo.csv  
    -------------------
    params:
        SRA_run_info:
            SraRunInfo.csv from NCBI SRA run selector
            with information on LibraryLayout and Run
    -------------------
    returns:
        data
            pd.DataFrame object with all columns from
            params.SRA_run_info
            NOT VERIFIED!
        
    """
    data = pd.read_csv(SRA_run_info)

    return data

def get_SE(SRA_data: pd.DataFrame) -> pd.DataFrame:
    """
    get single end libaries from SRA_run_info
    -------------------
    params:
        SRA_data
            pd.DataFrame object from previous function
    -------------------
    returns:
        SE_files
            pd.DataFrme object containg only single-end
            library
    """
    return SRA_data.loc[SRA_data["LibraryLayout"] == "SINGLE"]

def get_PE(SRA_data: pd.DataFrame) -> pd.DataFrame:
    """
    get single end libaries from SRA_run_info
    -------------------
    params:
        SRA_data
            pd.DataFrame object from previous function
    -------------------
    returns:
        PE_files
            pd.DataFrme object containg only single-end
            library
    """
    return SRA_data.loc[SRA_data["LibraryLayout"] == "PAIRED"]

# VARIABLES:
SRA_info=get_table(config["SraRunInfo"])
SRA_SE=get_SE(SRA_info)
SRA_SE_acc=SRA_SE["Run"].tolist()
SRA_PE=get_PE(SRA_info)
SRA_PE_acc=SRA_PE["Run"].tolist()

combined=[]
combined.extend(SRA_SE_acc)
combined.extend(SRA_PE_acc)

#genomes=[]
#files=glob.glob("./raw_data/*")
#for genome in files:
#    gen = genome.split("/")[-1]
#    omit_rel = genome.replace("./", "").replace(gen, "")
#    raw_data = [omit_rel + "fastq/" + s + "/" + s + "_1.fastq" for s in accessions_list]
#    processed_genome = genome.replace("raw_data", "processed_data").replace("./", "")
#    genomes.append(processed_genome)
#for genome in genomes:
#    kallisto_list = [genome + "/" + s for s in accessions_list]

include: "rules/fastq-dump.smk"
include: "rules/kallisto.smk"
 
rule all:
    input:
        expand("raw_data/SE/{accession}_1.fastq.gz", accession = SRA_SE_acc),
        expand("raw_data/PE/{accession}_{PE}.fastq.gz", accession = SRA_PE_acc, PE = [1, 2]),
        # neeed to differentiate between SE and PE for kallisto as ambiguity otherwise arises, this might just be a temporary fix
        expand("processed_data/SE/{accession}", accession = SRA_SE_acc),
        expand("processed_data/PE/{accession}", accession = SRA_PE_acc)